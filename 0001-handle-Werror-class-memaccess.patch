From f1ac333b0e70ceb3208d7def777a06109cf824eb Mon Sep 17 00:00:00 2001
From: Tobias Jungel <tobias.jungel@gmail.com>
Date: Wed, 5 Dec 2018 11:56:17 -0800
Subject: [PATCH 1/3] handle -Werror=class-memaccess

src/core/lib/security/credentials/oauth2/oauth2_credentials.cc: In function 'void init_oauth2_token_fetcher(grpc_oauth2_token_fetcher_credentials*, grpc_fetch_oauth2_func)':
src/core/lib/security/credentials/oauth2/oauth2_credentials.cc:336:61: error: 'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct grpc_oauth2_token_fetcher_credentials'; use assignment or value-initialization instead [-Werror=class-memaccess]
   memset(c, 0, sizeof(grpc_oauth2_token_fetcher_credentials));
                                                             ^
In file included from src/core/lib/security/credentials/oauth2/oauth2_credentials.cc:21:
./src/core/lib/security/credentials/oauth2/oauth2_credentials.h:70:16: note: 'struct grpc_oauth2_token_fetcher_credentials' declared here
 typedef struct {
                ^
cc1plus: all warnings being treated as errors
---
 .../filters/client_channel/health/health_check_client.cc    | 6 +++---
 .../lib/security/credentials/oauth2/oauth2_credentials.cc   | 3 ++-
 src/cpp/common/channel_filter.cc                            | 2 +-
 3 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/core/ext/filters/client_channel/health/health_check_client.cc b/src/core/ext/filters/client_channel/health/health_check_client.cc
index 587919596f..a901c2cedb 100644
--- a/src/core/ext/filters/client_channel/health/health_check_client.cc
+++ b/src/core/ext/filters/client_channel/health/health_check_client.cc
@@ -349,7 +349,7 @@ void HealthCheckClient::CallState::StartCall() {
     return;
   }
   // Initialize payload and batch.
-  memset(&batch_, 0, sizeof(batch_));
+  memset(static_cast<void*>(&batch_), 0, sizeof(batch_));
   payload_.context = context_;
   batch_.payload = &payload_;
   // on_complete callback takes ref, handled manually.
@@ -401,7 +401,7 @@ void HealthCheckClient::CallState::StartCall() {
   // Start batch.
   StartBatch(&batch_);
   // Initialize recv_trailing_metadata batch.
-  memset(&recv_trailing_metadata_batch_, 0,
+  memset(static_cast<void*>(&recv_trailing_metadata_batch_), 0,
          sizeof(recv_trailing_metadata_batch_));
   recv_trailing_metadata_batch_.payload = &payload_;
   // Add recv_trailing_metadata op.
@@ -507,7 +507,7 @@ void HealthCheckClient::CallState::DoneReadingRecvMessage(grpc_error* error) {
   // This re-uses the ref we're holding.
   // Note: Can't just reuse batch_ here, since we don't know that all
   // callbacks from the original batch have completed yet.
-  memset(&recv_message_batch_, 0, sizeof(recv_message_batch_));
+  memset(static_cast<void*>(&recv_message_batch_), 0, sizeof(recv_message_batch_));
   recv_message_batch_.payload = &payload_;
   payload_.recv_message.recv_message = &recv_message_;
   payload_.recv_message.recv_message_ready = GRPC_CLOSURE_INIT(
diff --git a/src/core/lib/security/credentials/oauth2/oauth2_credentials.cc b/src/core/lib/security/credentials/oauth2/oauth2_credentials.cc
index 44b093557f..2dbc6894ff 100644
--- a/src/core/lib/security/credentials/oauth2/oauth2_credentials.cc
+++ b/src/core/lib/security/credentials/oauth2/oauth2_credentials.cc
@@ -333,7 +333,8 @@ static void oauth2_token_fetcher_cancel_get_request_metadata(
 
 static void init_oauth2_token_fetcher(grpc_oauth2_token_fetcher_credentials* c,
                                       grpc_fetch_oauth2_func fetch_func) {
-  memset(c, 0, sizeof(grpc_oauth2_token_fetcher_credentials));
+  memset(static_cast<void*>(c), 0,
+         sizeof(grpc_oauth2_token_fetcher_credentials));
   c->base.type = GRPC_CALL_CREDENTIALS_TYPE_OAUTH2;
   gpr_ref_init(&c->base.refcount, 1);
   gpr_mu_init(&c->mu);
diff --git a/src/cpp/common/channel_filter.cc b/src/cpp/common/channel_filter.cc
index 422e7bb65e..b4a35d52c6 100644
--- a/src/cpp/common/channel_filter.cc
+++ b/src/cpp/common/channel_filter.cc
@@ -30,7 +30,7 @@ namespace grpc {
 grpc_linked_mdelem* MetadataBatch::AddMetadata(const string& key,
                                                const string& value) {
   grpc_linked_mdelem* storage = new grpc_linked_mdelem;
-  memset(storage, 0, sizeof(grpc_linked_mdelem));
+  memset(static_cast<void*>(storage), 0, sizeof(grpc_linked_mdelem));
   storage->md = grpc_mdelem_from_slices(SliceFromCopiedString(key),
                                         SliceFromCopiedString(value));
   GRPC_LOG_IF_ERROR("MetadataBatch::AddMetadata",
-- 
2.19.2

